[
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "Deck\n\n Deck ()\n\nInitialize self. See help(type(self)) for accurate signature.\nWhen we initially create a deck all of the cards will be present\n\ndeck = Deck()\ndeck\n\nA♣️; 2♣️; 3♣️; 4♣️; 5♣️; 6♣️; 7♣️; 8♣️; 9♣️; 10♣️; J♣️; Q♣️; K♣️; A♦️; 2♦️; 3♦️; 4♦️; 5♦️; 6♦️; 7♦️; 8♦️; 9♦️; 10♦️; J♦️; Q♦️; K♦️; A❤️; 2❤️; 3❤️; 4❤️; 5❤️; 6❤️; 7❤️; 8❤️; 9❤️; 10❤️; J❤️; Q❤️; K❤️; A♠️; 2♠️; 3♠️; 4♠️; 5♠️; 6♠️; 7♠️; 8♠️; 9♠️; 10♠️; J♠️; Q♠️; K♠️\n\n\n\nlen(deck)\n\n52\n\n\n\ntest_eq(len(deck), 52)\n\n\nsuits\n\n['♣️', '♦️', '❤️', '♠️']\n\n\nWe can check if, say, the Ace of Clubs in the deck:\n\nCard(1,1) in deck\n\nTrue\n\n\n\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove and return the last card in the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one\n\n\n\n\n\n\nDeck.remove\n\n Deck.remove (idx:int=-1)\n\nRemove the last card in the deck or raise exception if it is not there\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one\n\n\n\n\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards, with replacement iif replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not draw with replacement\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13))\n\n\ndraw_n(13, replace=False)\n\n[8♣️, 6❤️, J♠️, 2❤️, 10❤️, Q♦️, 5♦️, 6♠️, K♣️, 10♦️, J♣️, 3♦️, 8♦️]",
    "crumbs": [
      "deck"
    ]
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "Card",
    "section": "",
    "text": "We will be using numbers to represent playing card clubs and ranks. These are the ranks:\nsuits\n\n['♣️', '♦️', '❤️', '♠️']\nFor instance the suit at index 0 :\nsuits[0]\n\n'♣️'\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\nFor instance the rank at index 1 (note that there isn’t a playing card at position 0) , since we want the ranks to match the indices where possible\nranks[1]\n\n'A'\nc = Card(suit=1, rank=3)\nc\n\n3♦️",
    "crumbs": [
      "Card"
    ]
  },
  {
    "objectID": "card.html#comparision-operators",
    "href": "card.html#comparision-operators",
    "title": "Card",
    "section": "Comparision operators",
    "text": "Comparision operators\nEquality, less than, and greater than work on the rank and suit indices:\n\n\nCard.__eq__\n\n Card.__eq__ (other:__main__.Card)\n\nReturn self==value.\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\ntest_ne(Card(suit=2, rank=3), Card(suit=1, rank=3))\ntest_ne(Card(suit=1, rank=2), Card(suit=1, rank=3))\n\n\n\n\nCard.__lt__\n\n Card.__lt__ (other:__main__.Card)\n\nReturn self&lt;value.\n\nassert Card(suit=1, rank=3) &lt; Card(suit=2, rank=3)\n\n\n\n\nCard.__gt__\n\n Card.__gt__ (other:__main__.Card)\n\nReturn self&gt;value.\n\nassert Card(suit=3, rank=3) &gt; Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3) &gt; Card(suit=2, rank=3)",
    "crumbs": [
      "Card"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_initial",
    "section": "",
    "text": "A deck of cards demo of nbdev based on the ideas by Allen B. Downey.",
    "crumbs": [
      "nbdev_initial"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_initial",
    "section": "Install",
    "text": "Install\npip install nbdev_initial\nor\nconda install nbdev_initial",
    "crumbs": [
      "nbdev_initial"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_initial",
    "section": "How to use",
    "text": "How to use\nThis lib provides Card class you can use to create , display and compare playing cards\n\nCard(1,3)\n\n3♦️\n\n\nsuits are numbered according to the list:\n\nsuits\n\n['♣️', '♦️', '❤️', '♠️']",
    "crumbs": [
      "nbdev_initial"
    ]
  }
]